
// Inputs
//
//Standard inputs can be used as is and on their own. If you want to build a form with several inputs and actions on submit, please look at the <a href=file:///C:/Users/carlr/Repos/styleguide/styleguide/styleguide/section-4.html>form layout</a>.
//
//Note:  &lt;br/&gt; tags are for styleguide demo purpose only.
//
//Markup:
//	<input type="text" placeholder="Name..."  />
// <br/>
// <br/>
//	<input type="password" placeholder="Password..." />
// <br/>
// <br/>
//	<input type="number" placeholder="Numbers..." />
//
//Styleguide 1.3
//

// Input with prepend
//
//Inputs with prepend icon can be used when the input effects something that can easily be represented by an icon. This way we can rely on it taking up the same space in all languages.
//However, don't mix standard inputs and prepend ones. These inputs should have a placeholder and maybe a tooltip for explanation, since the icon is used in place of a label.
//
//Markup:
//	<label for="inputId" class="input-prepend">
//		<i class="mdi mdi-filter-outline">
//		<md-tooltip>Filter something</md-tooltip></i>
//		<input type="text" id="inputId" placeholder="Filter something"/>
//	</label>
//
//Styleguide 1.3.1
//

label {
	display: inline !important;
}

input{
	font-size:15px;
	height: 24px;
}

input[type='text'], input[type='password']{
	height: 20px;
}

input[type='text'],[type='number'], input[type='password'], select{
	border: none;
	color: $gray087;
	line-height: 1;
	border-bottom: 1px solid $gray-300;

	&:focus {
		border: none;
		outline: none;
		border-bottom: 1px solid $blue-100;
	}
}

.input-prepend {
  width: 100%;

  i {
    display: inline-block;
    width: 18px;
		cursor: pointer;
		color: rgba(0, 0, 0, 0.54);
		&:before{
			vertical-align: sub;
		}
  }
  input[type='text'] {
    display: inline-block;
    width: auto;
  }
}

::-webkit-input-placeholder { /* WebKit browsers */
  color: $gray026;
}
:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
  color: $gray026;
  opacity:  1;
}
::-moz-placeholder { /* Mozilla Firefox 19+ */
  color: $gray026;
  opacity:  1;
}
:-ms-input-placeholder { /* Internet Explorer 10+ */
  color: $gray026;
}


/*Form validation*/
.wfm-form{

	label{
		cursor:pointer!important;
		font-weight: normal!important;
		color:$gray054;
		font-size: 13px;
	}

input, select{
	max-width:100%;
	margin-right:100%;
}
input > .ng-invalid{
	border-bottom: 5px solid red!important;
}

input[type="text"],
input[type="number"],
input[type="password"],
input[type="email"]{
	padding-left: 7px;
}

.form-input-message{
	opacity: 0;
	height: 0;
	font-size: 13px;
  transition: $transition-timing;
}
.formInvalidInput{
	opacity: 1;
	height:auto;
	color:red!important;
}
.form-input-wrap{
	padding:10px 0;
}
.animate-input-message {
  line-height: 20px;
	height:auto;
  opacity: 1;
}
.animate-input-message.ng-hide-add, .animate-input-message.ng-hide-remove {
  transition: $transition-timing;
}
.animate-input-message.ng-hide {
  line-height: 0;
	height: 0;
  opacity: 0;
}

}
// Select
//
// The select is used to provide many options to the user and make complex selections simpler.
//
// The first example is a common select.
//
// The md-select doesnt render correctly in the styleguide but works fine in the project.
//
// Markup:
//	<select>
//		<option value="" disabled selected>Pick a number...</option>
//		<option>1</option>
//		<option>2</option>
//		<option>3</option>
//	</select>
//	<md-select ng-model="model" placeholder="Pick an option">
//		<md-option ng-repeat="item in demos" ng-value="{{item.id}}">{{item.id}}</md-option>
//	</md-select>
//
//Styleguide 1.4
//

select{
	@extend .wfm-block;
	cursor: pointer;
}

.md-select-menu-container.md-active {
	z-index: 1010;
}

md-select.md-default-theme:not([disabled]):focus .md-select-label{
	border-bottom: $pink-500  1px solid;
	padding: 0;
}

md-select-menu md-option:hover {
	background-color: $gray-300 ;
}

md-select-menu md-option[selected], md-select-menu md-option[selected]:focus{
	background-color: $green-100;
}

md-select {
	margin-top: auto;
	.md-select-label{
		padding: 0;
		height: 21px;
		font-size: 15px;
	}

}

md-option{
	height: 30px;
}

// Radio buttons
//
// Radio buttons are a group of options that can only have one item selected at a time.
//
//<div class="jsprewrap">
//	<div ng-click="showjs = !showjs" class="ksscopy">JavaScript</div>
//	<div ng-show="showjs">
//		<code><pre>
//	  $scope.demos = [{id: '1'}, {id: '2'}, {id: '3'}, {id: '4'}];
//		</pre></code>
//	</div>
//</div>
//
//Markup:
//	<form>
//		<div class="wfm-radio">
//			<input type="radio" name="group1" id="radio1" checked="true"/>
//			<label for="radio1">
//				<span class="wfm-radio-toggle"></span>
//				<span class="wfm-radio-label">This</span>
//			</label>
//		</div>
//		<div class="wfm-radio">
//			<input type="radio" name="group1" id="radio2" />
//			<label for="radio2">
//				<span class="wfm-radio-toggle"></span>
//				<span class="wfm-radio-label">That</span>
//			</label>
//		</div>
//	</form>
//	<h3>Using ng-repeat:</h3>
//	<form>
//		<div ng-repeat="item in demos">
//			<div class="wfm-radio">
//				<label>
//					<input type="radio" name="radio" value="value">
//					<span class="wfm-radio-toggle"></span>
//					<span class="wfm-radio-label">Im looped out!</span>
//				</label>
//			</div>
//		</div>
//	</form>
//
//Styleguide 1.5
//

.wfm-radio {
@extend .wfm-block;
	input[type='radio'] {
		display:none;
	}

.wfm-radio-toggle {
		position: absolute;
		background-color: $gray026;
		width: 20px;
		height: 20px;
		border-radius: 40px;
		-webkit-transition: background-color .2s ease-in-out;
		transition: background-color .2s ease-in-out;
		cursor: pointer;
	}

	input[type=radio]:checked ~ label .wfm-radio-toggle,
	input[type=radio]:checked ~ .wfm-radio-toggle{
		background-color: $blue-300;
	}

	.wfm-radio-label{
		margin-left: 20px + $full-padding;
		white-space:nowrap;
		cursor: pointer;
	}
}

//Checkboxes
//
//Checkboxes are used for selecting multiple input options.
//
//<div class="jsprewrap">
//	<div ng-click="showjs = !showjs" class="ksscopy">JavaScript</div>
//	<div ng-show="showjs">
//		<code><pre>
//	  $scope.demos = [{id: '1'}, {id: '2'}, {id: '3'}, {id: '4'}];
//		</pre></code>
//	</div>
//</div>
//
//Markup:
//	<form>
//		<div class="wfm-checkbox">
//			<input type="checkbox" id="check1" checked="true"/>
//			<label for="check1">
//				<span class="wfm-checkbox-toggle"></span>
//				<span class="wfm-checkbox-label">Check </span>
//			</label>
//		</div>
//		<div class="wfm-checkbox">
//			<input type="checkbox" id="check2" />
//			<label for="check2">
//				<span class="wfm-checkbox-toggle"></span>
//				<span class="wfm-checkbox-label">Check </span>
//			</label>
//		</div>
//	</form>
//	<h3>Using ng-repeat:</h3>
//	<form>
//		<div ng-repeat="item in demos">
//			<div class="wfm-checkbox">
//				<label>
//					<input type="checkbox" name="checkbox" value="value">
//					<span class="wfm-checkbox-toggle"></span>
//					<span class="wfm-checkbox-label">Im looped out!</span>
//				</label>
//			</div>
//		</div>
//	</form>
//
//Styleguide 1.6
//

.wfm-checkbox {
@extend .wfm-block;

	input[type='checkbox'] {
		display:none;
	}

.wfm-checkbox-toggle:after {
		position: absolute;
		background-color: $gray026;
		width: 20px;
		height: 20px;
		float:right;
		border-radius:2px;
		content: " ";
		-webkit-transition: background-color .2s ease-in-out;
		transition: background-color .2s ease-in-out;
		cursor: pointer;
	}

	input[type=checkbox]:checked ~ label .wfm-checkbox-toggle:after,
	input[type=checkbox]:checked ~ .wfm-checkbox-toggle:after{
		background-color: $blue-300;
		content: " âœ“";
		text-align: center;
		color:$white;
	}

	.wfm-checkbox-label{
		margin-left: 20px + $full-padding;
		white-space:nowrap;
		cursor: pointer;
	}
}

//Switch
//
// The switch is used to toggle between two states (for example show/hide, using <a href="http://goo.gl/M5U1oC">Angulars ng-show or ng-hide</a> to toggle other elements).
//
//Markup:
//	<div class="wfm-switch">
//		<input type="checkbox" id="switch1" />
//		<label for="switch1">
//			<span class="wfm-switch-label">Show selected items</span>
//			<span class="wfm-switch-toggle"></span>
//		</label>
//	</div>
//
//Styleguide 1.7
//

.wfm-switch {
	position: relative;
	height: 24px;
	padding-top: 2px;

	label{
		vertical-align: middle;
	}

	input[type='checkbox'] {
		display: none;
	}

	.wfm-switch-toggle {
		position: absolute;
		background-color: $gray-300;
		width: 48px;
		height: 18px;
		border-radius: 40px;
		-webkit-transition: background-color .2s ease-in-out;
		transition: background-color .2s ease-in-out;
		margin: 2px 5px;
		cursor: pointer;
	}
	.wfm-switch-toggle:after {
		content: "";
		display: block;
		width: 12px;
		height: 12px;
		border-radius: 44px;
		cursor: pointer;
		position: absolute;
		top: 3px;
		z-index: 1;
		left: 5px;
		background-color: $white;
		-webkit-transition: left .2s ease-in-out;
		transition: left .2s ease-in-out;
	}
	input[type=checkbox]:checked ~ label .wfm-switch-toggle{
		background-color: $blue-300;
	}

	input[type=checkbox]:checked ~ label .wfm-switch-toggle:after {
		left: 30px;
	}

	.wfm-switch-label{
		white-space:nowrap;
		cursor: pointer;
	}
}


//Slider
//
//The slider is used to input a range or value on a scale. It can be controlled with left and right arrow keys for greater accuracy if focused.
//
//Markup:
//Default
//<md-slider flex min="0" max="100" aria-label="slider"></md-slider>
//With label
//<md-slider flex md-discrete min="0" max="100" aria-label="slider"></md-slider>
//
//Styleguide 1.9
//

md-slider{

	 .md-focus-thumb, .md-focus-ring {
		display:none!important;
	}

	.md-thumb {
		cursor:pointer;
	}

	canvas{display:none;}
}

/*slider theme*/

md-slider .md-thumb:after {
  border-color: $blue-300;
  background-color: $blue-300;
}

md-slider .md-track.md-track-fill,
md-slider .md-sign {
  background-color: $blue-300;
}

md-slider .md-sign:after {
  border-top-color: $blue-300;
}

md-slider.md-min .md-thumb:after {
  background-color: $white!important;
  transition: all 0.5s ease-in-out;
}

.wfm-form label {
    display: inline-block!important;
}
