@import './variables';

//Elements
//
//Elements are the individual parts that make up the application. Elements can be stand alone but more often they are part of a container. By arranging elements in containers using layout, we can get a structured and consistent style.
//
//Styleguide 1
//
//

//Depth
//
//Getting a deeper look into the styles of shadows and positioning. The first thing we need to understand is the concept of stacked material (see the <a href="http://www.google.com/design/spec/what-is-material/elevation-shadows.html#elevation-shadows-shadows">Google guidelines</a> ).
//
//Keep the number of stacked layers to a minimum and the total number of layer below 3 (including the background). If a raised element lives inside of another raised element it should still have a material-depth number of one, unless it is floating.
//Floating elements live above the main layout (such as context menus) and should have the highest material-depth number possible (2).
//
//If the element does not have a raised wrapper and is placed freely on the background it should have a depth value of 1.
//
//Note: the 'spacer' class is for styleguide demo purpose only.
//
//Markup:
//<div class="spacer"> Background </div>
//<div class="spacer material-depth-1"> Layer 1 </div>
//<div class="spacer material-depth-2"> Layer 2 </div>
//<div class="spacer material-depth-1">
//	<p class="spacer material-depth-1"> Stacked </p>
//</div>
//
//Styleguide 1.1
//

//Components
//
//Here you can find more complex elements that rely on Javascript and Angular.
//
//Styleguide 2
//

//Colors
//
// We would like to provide alternative themes but it's a WIP
//
//Styleguide 3
//

//Containers
//
//Containers are responsible for shaping the layout and creates structure to the views.
//Almost everything described in the elements chapter should be housed inside a container.
//There are different kinds of containers that all have different applications, what they do however have in common is the ability to house flex grids and/or elements.
//When building a new view, start by picking one or several containers and a flex layout that fits with your views content.
//Try to avoid nesting containers whenever possible.
//
//
//Styleguide 4
//
//

//Layout
//
//The layout consists of the flex grid. Since the grid is adapting to the number of items inside it, be careful not to use too many in one row. The recomended max number of con-flex items in one row is 4, if more are needed, concider using a tabbed container or spreading them out over sveral rows.
//
//Note: the ´demo-outline´ class is for styleguide demo purpose only.
//
//Markup:
// <div class="con-row demo-outline">
//    <div class="con-flex">100%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex">50%</div>
//    <div class="con-flex">50%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex">33%</div>
//    <div class="con-flex">33%</div>
//    <div class="con-flex">33%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex split-3-1">75%</div>
//    <div class="con-flex">25%</div>
// </div>
//  <div class="con-row demo-outline">
//    <div class="con-flex split-1-2">50%</div>
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
// </div>
//
//Styleguide 4.1
//
//

//Panel
//
//The panel is the main container and the most versitile. It can house most elements and can be configured in a number of layouts.
//If needed it can have a context menu or a footer for more actions. Since a panel is a raised pice of material, avoid using other raised elements on top of it, unless they are floating (like a action button or context menu)
//
//Note: the ´demo-outline´ class is for styleguide demo purpose only.
//
//Markup:
//<div class="panel material-depth-1">
//  <div class="sub-header">
//    Panel title
//    <div class="head-actions panel-menu">
//      <button class="context-menu card-context">
//        <i class="mdi mdi-dots-vertical"></i>
//        <span class="context-menu-left">
//          <ul class="wfm-list">
//            <li>Menu item 1</li>
//            <li>Menu item 2</li>
//            <li>Menu item 3</li>
//          </ul>
//        </span>
//      </button>
//    </div>
//  </div>
//  <hr>
// <div class="con-row demo-outline">
//    <div class="con-flex">Content</div>
// </div>
//<hr/>
//  <div class="panel-footer">
//	 <button class="wfm-btn wfm-btn-invis-default">Advanced</button>
//    <button class="wfm-btn wfm-btn-invis-primary">Options</button>
//  </div>
//</div>
//
//
//Styleguide 4.2

.panel{
  margin-bottom: $full-padding*2;
  background:$white;
  position: relative;

  .panel-menu{
    position: absolute;
    top:8px;
    right:8px;
    z-index:10;
  }

  hr{
    border:1px solid ;
    border-color:rgba(0,0,0,.06);
  }

  .panel-footer {
      text-align: right;
      color: rgba(0,0,0,.87);
  }
}

.con-flex{
  flex-basis: 100%;
  padding:$full-padding;

  input, select{
    width:100%;
  }
}

.demo-outline > .con-flex{
  outline:1px dashed $gray012;
}

.split-3-1{
  flex-basis: 50%!important;
}

.split-1-2{
  flex-basis: 25%!important;
}

@media screen and (min-width: 768px) {
  .con-row {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
  }
  .con-flex {
    flex: 1;
  }
  ._25 {
    flex: 2.5;
  }
  ._5 {
    flex: 5;
  }
}
//Tabbed panel
//
//When using tabbed panels, one important thing to remember is to order the tabs in a way that makes sense to the workflow.
//Also, several tab groups close together to avoid confusion.
//
//Note: the ´demo-outline´ class is for styleguide demo purpose only.
//
//Markup:
//<div class="panel material-depth-1">
//<div class="wfm-slide-tabs tabbed-panel">
//    <div class="head-actions panel-menu">
//      <button class="context-menu card-context">
//        <i class="mdi mdi-dots-vertical"></i>
//        <span class="context-menu-left">
//          <ul class="wfm-list">
//            <li>Menu item 1</li>
//            <li>Menu item 2</li>
//            <li>Menu item 3</li>
//          </ul>
//        </span>
//      </button>
//    </div>
//  <md-content class="md-padding">
//    <md-tabs md-dynamic-height md-border-bottom >
//      <md-tab label="Tab title1">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wfm-btn wfm-btn-invis-default">Advanced</button>
//            <button class="wfm-btn wfm-btn-invis-primary">Options</button>
//          </div>
//        </md-content>
//      </md-tab>
//      <md-tab label="Tab title2">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wfm-btn wfm-btn-invis-default">Advanced</button>
//            <button class="wfm-btn wfm-btn-invis-primary">Options</button>
//          </div>
//        </md-content>
//      </md-tab>
//      <md-tab label="Tab title3">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wfm-btn wfm-btn-invis-default">Advanced</button>
//            <button class="wfm-btn wfm-btn-invis-primary">Options</button>
//          </div>
//        </md-content>
//      </md-tab>
//      <md-tab label="Tab title4">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//            <div class="con-row demo-outline">
//              <div class="con-flex">Things</div>
//              <div class="con-flex">Things</div>
//              <div class="con-flex">Things</div>
//              <div class="con-flex">Things</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wfm-btn wfm-btn-invis-default">Advanced</button>
//            <button class="wfm-btn wfm-btn-invis-primary">Options</button>
//          </div>
//        </md-content>
//      </md-tab>
//    </md-tabs>
//  </md-content>
//</div>
//</div>
//
//
//Styleguide 4.3

//Wizard panel
//
//When using tabbed panels, one important thing to remember is to order the tabs in a way that makes sense to the workflow.
//Also, several tab groups close together to avoid confusion.
//
//Note: the ´demo-outline´ class is for styleguide demo purpose only.
//
//Markup:
//<div class="panel material-depth-1">
//<div class="wfm-slide-tabs tabbed-panel">
//    <div class="head-actions panel-menu">
//      <button class="context-menu card-context">
//        <i class="mdi mdi-dots-vertical"></i>
//        <span class="context-menu-left">
//          <ul class="wfm-list">
//            <li>Menu item 1</li>
//            <li>Menu item 2</li>
//            <li>Menu item 3</li>
//          </ul>
//        </span>
//      </button>
//    </div>
//  <md-content class="md-padding">
//    <md-tabs md-dynamic-height md-border-bottom md-selected="selectedIndex">
//      <md-tab label="Tab title1">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wizard-step wfm-btn wfm-btn-invis-primary" ng-click="nextTab()">Next</button>
//          </div>
//        </md-content>
//      </md-tab>
//      <md-tab label="Tab title2">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wizard-step wfm-btn wfm-btn-invis-primary" ng-click="nextTab()">Next</button>
//          </div>
//        </md-content>
//      </md-tab>
//      <md-tab label="Tab title3">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wizard-step wfm-btn wfm-btn-invis-primary" ng-click="nextTab()">Next</button>
//          </div>
//        </md-content>
//      </md-tab>
//      <md-tab label="Tab title4">
//        <md-content class="md-padding">
//            <div class="con-row demo-outline">
//              <div class="con-flex">Content</div>
//            </div>
//          <hr/>
//          <div class="panel-footer">
//            <button class="wfm-btn wfm-btn-invis-primary">Done</button>
//          </div>
//        </md-content>
//      </md-tab>
//    </md-tabs>
//  </md-content>
//</div>
//</div>
//
//
//Styleguide 4.3.1

.tabbed-panel{
  md-content{
    padding:0;
  }

  md-tabs-wrapper{
    margin-top: 5px;
    background:$blue-300;
    border-width: 0 !important;
    border-style: none!important;
  }
  .md-padding{
    margin: 0 5px;
  }

  .head-actions{
    margin-top:-8px;
  }
}

.tabbed-panel-header{
  .card-context{
    margin-top: 15px;
  }
}

//Form layout
//
//Forms are made up of individual inputs that can be validated on interaction and/or on a submit. A form can be created in many different configurations and the layout should help the user complete the form without confusion. Take some time to consider your form layout in relation to the layout of your view and strive to not waste space.
//
//<code><pre>
//Reset validation errors:
//$scope.reset = function(form) {
//   if (form) {
//     form.$setPristine();
//     form.$setUntouched();
//   }
// };
//</pre></code>
//
//Markup: form_panel.hbs
//
//
//Styleguide 4.4

.wfm-form label {
    display: inline-block!important;
}

//Resources
//
//Here you can find some links to go further in CSS best practices
//
//Styleguide 7
//
//

//Urls
//
// https://developer.mozilla.org/en-US/docs/Web/CSS
//
// http://philipwalton.com/articles/css-architecture/
//
// http://styleguides.io/
//
// http://alistapart.com/article/creating-style-guides
//
// http://axbom.com/slaying-5-ux-myths-good-mankind/
//
//Styleguide 7.1

.spacer {
  margin: 25px;
  padding: 15px;
  text-align:center;
  display: inline-block;
  background: white;
  }

/*template styles*/
.kss-sidebar {
	position:fixed!important;
}

#kss-node .kss-title__permalink {
    font-size: 30px;
    font-weight: normal;
}

#kss-node .kss-section {
	max-width: 80%;
}

.kss-style code {
	font-size: 12px;
	line-height: 14px !important;
	font-family: Menlo,Monaco,"Andale Mono","lucida console","Courier New",monospace;
}

#kss-node ol.linenums li {
	border:none;
}

#kss-node .kss-sidebar {
  background: white;
  top: 0;
  z-index:9;
}

.styleguide-break{
	background-color:$orange-400;
	color:$gray087;
	padding:$full-padding;

	span:before{
		content:"This element does not exist in material design. ";
	}
}

.angular-req span:before{
	content:"This element require additional angular directives. "!important;
}
