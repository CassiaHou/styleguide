@import './variables';

//Elements
//
//Here are detailed all the style rules for the web application.
//
//Styleguide 1
//
//

//Depth
//
//Getting a deeper look into the styles of shadows and positioning. The first thing we need to understand is the concept of stacked material (see the <a href="http://www.google.com/design/spec/what-is-material/elevation-shadows.html#elevation-shadows-shadows">Google guidelines</a> ).
//
//Keep the number of stacked layers to a minimum and the total number of layer below 3 (including the background). If a raised element lives inside of another raised element it should have a higher material-depth number (i.e a panel with a depth of 1 can have one panel with a depth of 2 above (inside) it.)
//
//Elements floating above the main layout (such as context menus) should have the highest material-depth number possible (2).
//
//Note: the 'spacer' class is for styleguide demo purpose only.
//
//Markup:
//<div class="spacer"> Background </div>
//<div class="spacer material-depth-1"> Layer 1 </div>
//<div class="spacer material-depth-2"> Layer 2 </div>
//<div class="spacer material-depth-1">
//	<p class="spacer material-depth-1"> Stacked </p>
//</div>
//
//Styleguide 1.1.0
//

//Trench
//
//<div class="styleguide-break"><i class="mdi mdi-alert"></i><span>We only use it for user interaction on small details. </span></div>
//
//The trench works much like the depth, however since it gives the illusion of a layer behind the current piece of material it should not be used on larger areas, as this will create raised "frames" around the trench.
//
//Note: the 'spacer' class is for styleguide demo purpose only.
//
//Markup:
//<div class="spacer material-trench-1"> Layer 1 </div>
//
//Styleguide 1.1 .1
//

//Components
//
//Here you can find more complex elements that rely on Javascript and Angular.
//
//Styleguide 2
//

//Colors
//
// We would like to provide alternative themes but it's a WIP
//
//Styleguide 3
//

//Layouts
//
//Here you can find some templates for your layout. Normaly you will not have to worry about the sidenavs or the topbar since these are loaded around your view.
//
//Styleguide 4
//
//

//Basic block layout
//
//This is the basic layout of the entire page. One of the main priciples here is that the content sould never make the layout-container scroll, but rather the content itself.
// * 1 - Layout container
// * 2 - Topbar
// * 3 - Sidenav
// * 4 - Sidenav toggle
// * 5 - Ui view
// * 6 - Panels
//
//<img src="../img/001.png"/>
//
//Styleguide 4.1
//
//

//Panels
//
//The panels are the building blocks of the layout. It is a way to group elements together or provide a means of separation.
//
//Markup:
//<div class=" material-depth-1">
//	<div class="sub-header">Title</div>
//	<div class="wfm-block">
//		This is the content, it can contain whatever you want!
//	</div>
//</div>
//
//
//Styleguide 4.2


//Form layout
//
//Forms are made up of individual inputs that can be validated on interaction and/or on a submit.
//
//<code><pre>
//Reset validation errors:
//$scope.reset = function(form) {
//   if (form) {
//     form.$setPristine();
//     form.$setUntouched();
//   }
// };
//</pre></code>
//
//Markup:
//<dl>
//  <h4>My form</h4>
//  <dd>
//   <form name="form" class="wfm-form" novalidate>
//    <div class="form-input-wrap">
//      <label for="nameId">Name: <input type="text" ng-model="form.name" name="Name" required="" id="nameId"/></label>
//      <div ng-cloak class="animate-input-message" ng-show ="form.$submitted || form.Name.$touched">
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Name.$error.required}">Tell me your name</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label for="ageId">Age: <input type="number" ng-model="form.age" name="Age" required="" id="ageId" min="1"/></label>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Age.$touched">
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Age.$error.required}">You need to be born</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label for="secretId">Password: <input type="password" ng-model="form.secret" name="Secret" required="" id="secretId"/></label>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Secret.$touched">
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Secret.$error.required}">Enter password</div>
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Secret < 8}">Password must be 8 characters or more</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label for="drop">How many:</label>
//     <select ng-model="form.drop" name="Drop" id="drop" required="">
//	     <option>1</option>
//	     <option>2</option>
//	     <option>3</option>
//     </select>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Drop.$error.required.$touched">
//        <div class="form-input-message" ng-class="{formInvalidInput:form.Drop.$error.required}">Pick at least one</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label>Group:</label>
//      <div class="wfm-checkbox">
//        <input type="checkbox" ng-model="form.box1" name="Box1" id="box1" required=""/>
//        <label for="box1">
//          <span class="wfm-checkbox-toggle"></span>
//		      <span class="wfm-checkbox-label">Group A</span>
//        </label>
//      </div>
//      <div class="wfm-checkbox">
//        <input type="checkbox" ng-model="form.box2" name="Box2" id="box2" required=""/>
//        <label for="box2">
//          <span class="wfm-checkbox-toggle"></span>
//		      <span class="wfm-checkbox-label">Group B</span>
//        </label>
//      </div>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Box.$error.required.$touched">
//        <div class="form-input-message" ng-class="{formInvalidInput:form.Box1.$error.required && form.Box2.$error.required}">Pick at least one</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//     <label>I selected #2 for you:</label>
//     <div ng-repeat="item in demos">
//       <div class="wfm-radio">
//        <label>
//			    <input type="radio" name="item" data-ng-model="radio" data-ng-value="item" ng-init="$index==1?(radio=item):''">
//			    <span class="wfm-radio-toggle"></span>
//			    <span class="wfm-radio-label">123</span>
//		    </label>
//	     </div>
//     </div>
//    <div class="form-input-wrap">
//      <button class="wfm-btn wfm-btn-default" type="button" ng-click="reset(form)"><md-tooltip>Hide all errors</md-tooltip>Clear</button>
//      <button class="wfm-btn wfm-btn-primary" type="submit" ng-click="update()"><md-tooltip>Save input if valid</md-tooltip>Apply</button>
//    </div>
//  </form>
//  </dd>
//</dl>
//
//
//Styleguide 4.3

//Scalability
//
//How to adapt our elements to big databases
//
//Styleguide 6


//Big tables
//
//The big table is used to give data more space and actions. Check out the <a href="http://ui-grid.info/docs/#/tutorial">documentation</a> to see all available functions.
//
//  Markup: bigtables.hbs
//
//Styleguide 6.1

.myGrid {
     width: 100%;
  }


//Resources
//
//Here you can find some links to go further in CSS best practices
//
//Styleguide 7
//
//

//Urls
//
// https://developer.mozilla.org/en-US/docs/Web/CSS
//
// http://philipwalton.com/articles/css-architecture/
//
// http://styleguides.io/
//
// http://alistapart.com/article/creating-style-guides
//
// http://axbom.com/slaying-5-ux-myths-good-mankind/
//
//Styleguide 7.1

.spacer {
  margin: 25px;
  padding: 15px;
  text-align:center;
  display: inline-block;
  background: white;
  }

/*template styles*/
.kss-sidebar {
	position:fixed!important;
}

#kss-node .kss-section {
	max-width: 80%;
}

.kss-style code {
	font-size: 12px;
	line-height: 14px !important;
	font-family: Menlo,Monaco,"Andale Mono","lucida console","Courier New",monospace;
}

#kss-node ol.linenums li {
	border:none;
}

#kss-node .kss-sidebar {
  background: white;
  top: 0;
  z-index:9;
}

.styleguide-break{
	background-color:$orange-400;
	color:$gray087;
	padding:$full-padding;

	span:before{
		content:"This element does not exist in material design. ";
	}
}

.angular-req span:before{
	content:"This element require additional angular directives. "!important;
}

.kss-markup {
    margin: -1px 0 24px 0;
    border: 1px solid #999;
    max-height: 0px;
    position: absolute;
    width:61.8%;
    z-index: 99;
    overflow-y: hidden;
    transition: 1s all ease-in;
    padding-top:30px;
    background:#eee;
  }

  .kss-markup:hover {
    max-height:1000px;
    z-index: 9999;
    overflow-y: auto;
  }

  .kss-markup:hover:before{
    content: "Copy markup";
  }

  .kss-markup:before{
    content: "View markup";
    background: #eee;
    position: absolute;
    left: 0;
    top:0;
    font-weight: bold;
    padding-left: 15px;
    padding-top: 5px;
    padding-bottom: 5px;
    cursor: pointer;
    right: 0;
  }
