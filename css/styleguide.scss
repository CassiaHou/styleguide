@import './variables';

//Elements
//
//Here are detailed all the style rules for the web application.
//
//Styleguide 1
//
//

//Depth
//
//Getting a deeper look into the styles of shadows and positioning. The first thing we need to understand is the concept of stacked material (see the <a href="http://www.google.com/design/spec/what-is-material/elevation-shadows.html#elevation-shadows-shadows">Google guidelines</a> ).
//
//Keep the number of stacked layers to a minimum and the total number of layer below 3 (including the background). If a raised element lives inside of another raised element it should have a higher material-depth number (i.e a panel with a depth of 1 can have one panel with a depth of 2 above (inside) it.)
//
//Elements floating above the main layout (such as context menus) should have the highest material-depth number possible (2).
//
//Note: the 'spacer' class is for styleguide demo purpose only.
//
//Markup:
//<div class="spacer"> Background </div>
//<div class="spacer material-depth-1"> Layer 1 </div>
//<div class="spacer material-depth-2"> Layer 2 </div>
//<div class="spacer material-depth-1">
//	<p class="spacer material-depth-1"> Stacked </p>
//</div>
//
//Styleguide 1.1
//

//Components
//
//Here you can find more complex elements that rely on Javascript and Angular.
//
//Styleguide 2
//

//Colors
//
// We would like to provide alternative themes but it's a WIP
//
//Styleguide 3
//

//Containers
//
//Containers are responsible for shaping the layout and creates structure to the views.
//Almost everything described in the elements chapter should be housed inside a container.
//There are different kinds of containers that all have different applications, what they do however have in common is the ability to house flex grids and/or elements.
//When building a new view, start by picking one or several containers and a flex layout that fits with your views content.
//Try to avoid nesting containers whenever possible.
//
//
//Styleguide 4
//
//

//Layout
//
//The layout consists of the flex grid. Since the grid is adapting to the number of items inside it, be careful not to use too many in one row. The recomended max number of con-flex items in one row is 4, if more are needed, concider using a tabbed container or spreading them out over sveral rows.
//
//Styleguide 4.1
//
//

//Panel
//
//The panel is the main container and the most versitile. It can house most elements and can be configured in a number of layouts.
//Since a panel is a raised pice of material, avoid using other raised elements on top of it, unless they are floating (like a action button or context menu)
//
//Note: the ´demo-outline´ class is for styleguide demo purpose only.
//
//Markup:
//<div class="panel material-depth-1">
//  <div class="sub-header">
//    Panel title
//    <div class="head-actions">
//      <button class="context-menu card-context">
//        <i class="mdi mdi-dots-vertical"></i>
//        <span class="context-menu-left">
//          <ul class="wfm-list">
//            <li>Menu item 1</li>
//            <li>Menu item 2</li>
//            <li>Menu item 3</li>
//          </ul>
//        </span>
//      </button>
//    </div>
//  </div>
//  <hr>
// <div class="con-row demo-outline">
//    <div class="con-flex">100%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex">50%</div>
//    <div class="con-flex">50%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex">33%</div>
//    <div class="con-flex">33%</div>
//    <div class="con-flex">33%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
// </div>
// <div class="con-row demo-outline">
//    <div class="con-flex split-3-1">75%</div>
//    <div class="con-flex">25%</div>
// </div>
//  <div class="con-row demo-outline">
//    <div class="con-flex split-1-2">50%</div>
//    <div class="con-flex">25%</div>
//    <div class="con-flex">25%</div>
// </div>
//<hr/>
//  <div class="panel-footer">
//	 <a class="wfm-btn wfm-btn-invis-default">Advanced</a>
//    <a class="wfm-btn wfm-btn-invis-primary">Apply</a>
//  </div>
//</div>
//
//
//Styleguide 4.2

.panel{
  margin-bottom: $full-padding*2;
  background:$white;
}

.con-flex{
  flex-basis: 100%;
  padding:$full-padding;
}

.demo-outline > .con-flex{
  outline:1px dashed $gray012;
}

.split-3-1{
  flex-basis: 50%!important;
}

.split-1-2{
  flex-basis: 25%!important;
}

@media screen and (min-width: 768px) {
  .con-row {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
  }
  .con-flex {
    flex: 1;
  }
  ._25 {
    flex: 2.5;
  }
  ._5 {
    flex: 5;
  }
}

hr{
  width: 100%;
  border:1px solid ;
  border-color:rgba(0,0,0,.06);
}

.panel-footer {
    text-align: right;
    padding: 10px 5px;
    color: rgba(0,0,0,.87);
}

//Tabbed panel
//
//When using tabbed panels, one important thing to remember is to order the tabs in a way that makes sense to the workflow.
//Also, several tab groups close together to avoid confusion.
//
//Note: the ´demo-outline´ class is for styleguide demo purpose only.
//
//Markup:
//<div class="panel material-depth-1">
//  <div class="tabbed-panel-header">
//    <div class="head-actions">
//      <button class="context-menu card-context">
//        <i class="mdi mdi-dots-vertical"></i>
//        <span class="context-menu-left">
//          <ul class="wfm-list">
//            <li>Menu item 1</li>
//            <li>Menu item 2</li>
//            <li>Menu item 3</li>
//          </ul>
//        </span>
//      </button>
//    </div>
//  </div>
//<div class="wfm-slide-tabs tabbed-panel">
//  <md-content class="md-padding">
//    <md-tabs md-dynamic-height md-border-bottom>
//      <md-tab label="first tab">
//        <md-content class="md-padding">
//          <h4>Tab One</h4>
//          <p>Click a tab to watch me go!</p>
//        </md-content>
//      </md-tab>
//      <md-tab label="second tab">
//        <md-content class="md-padding">
//          <h4>Tab Two</h4>
//          <p>wheeeee</p>
//        </md-content>
//      </md-tab>
//      <md-tab label="third tab">
//        <md-content class="md-padding">
//          <h4>Tab Three</h4>
//          <p>Slow down!</p>
//        </md-content>
//      </md-tab>
//      <md-tab label="fourth tab">
//        <md-content class="md-padding">
//          <h4>Tab Four</h4>
//          <p>Now listen here you little whippersnapper, back in the good old days you had to break words all by the sweat of your own brow. You youngsters have it easy! If you have a long text in here, I will like just wrap to a new line if it has to. </p>
//        </md-content>
//      </md-tab>
//    </md-tabs>
//  </md-content>
//</div>
//<hr/>
//  <div class="panel-footer">
//	 <a class="wfm-btn wfm-btn-invis-default">Advanced</a>
//    <a class="wfm-btn wfm-btn-invis-primary">Apply</a>
//  </div>
//</div>
//
//
//Styleguide 4.3

.tabbed-panel{
  md-content{
    padding:0;
  }

  md-tabs-wrapper{
    padding-top: 5px;
  }
  .md-padding{
    margin: 0 5px;
  }

  .head-actions{
    margin-top:-8px;
  }
}

.tabbed-panel-header{
  .card-context{
    margin-top: 15px;
  }
}

//Form layout
//
//Forms are made up of individual inputs that can be validated on interaction and/or on a submit.
//
//<code><pre>
//Reset validation errors:
//$scope.reset = function(form) {
//   if (form) {
//     form.$setPristine();
//     form.$setUntouched();
//   }
// };
//</pre></code>
//
//Markup:
//<dl>
//  <h4>My form</h4>
//  <dd>
//   <form name="form" class="wfm-form" novalidate>
//    <div class="form-input-wrap">
//      <label for="nameId">Name: <input type="text" ng-model="form.name" name="Name" required="" id="nameId"/></label>
//      <div ng-cloak class="animate-input-message" ng-show ="form.$submitted || form.Name.$touched">
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Name.$error.required}">Tell me your name</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label for="ageId">Age: <input type="number" ng-model="form.age" name="Age" required="" id="ageId" min="1"/></label>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Age.$touched">
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Age.$error.required}">You need to be born</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label for="secretId">Password: <input type="password" ng-model="form.secret" name="Secret" required="" id="secretId"/></label>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Secret.$touched">
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Secret.$error.required}">Enter password</div>
//      <div class="form-input-message" ng-class="{formInvalidInput:form.Secret < 8}">Password must be 8 characters or more</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label for="drop">How many:</label>
//     <select ng-model="form.drop" name="Drop" id="drop" required="">
//	     <option>1</option>
//	     <option>2</option>
//	     <option>3</option>
//     </select>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Drop.$error.required.$touched">
//        <div class="form-input-message" ng-class="{formInvalidInput:form.Drop.$error.required}">Pick at least one</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//      <label>Group:</label>
//      <div class="wfm-checkbox">
//        <input type="checkbox" ng-model="form.box1" name="Box1" id="box1" required=""/>
//        <label for="box1">
//          <span class="wfm-checkbox-toggle"></span>
//		      <span class="wfm-checkbox-label">Group A</span>
//        </label>
//      </div>
//      <div class="wfm-checkbox">
//        <input type="checkbox" ng-model="form.box2" name="Box2" id="box2" required=""/>
//        <label for="box2">
//          <span class="wfm-checkbox-toggle"></span>
//		      <span class="wfm-checkbox-label">Group B</span>
//        </label>
//      </div>
//      <div ng-cloak class="animate-input-message" ng-show="form.$submitted || form.Box.$error.required.$touched">
//        <div class="form-input-message" ng-class="{formInvalidInput:form.Box1.$error.required && form.Box2.$error.required}">Pick at least one</div>
//      </div>
//    </div>
//    <div class="form-input-wrap">
//     <label>I selected #2 for you:</label>
//     <div ng-repeat="item in demos">
//       <div class="wfm-radio">
//        <label>
//			    <input type="radio" name="item" data-ng-model="radio" data-ng-value="item" ng-init="$index==1?(radio=item):''">
//			    <span class="wfm-radio-toggle"></span>
//			    <span class="wfm-radio-label">123</span>
//		    </label>
//	     </div>
//     </div>
//    <div class="form-input-wrap">
//      <button class="wfm-btn wfm-btn-default" type="button" ng-click="reset(form)"><md-tooltip>Hide all errors</md-tooltip>Clear</button>
//      <button class="wfm-btn wfm-btn-primary" type="submit" ng-click="update()"><md-tooltip>Save input if valid</md-tooltip>Apply</button>
//    </div>
//  </form>
//  </dd>
//</dl>
//
//
//Styleguide 4.4

//Resources
//
//Here you can find some links to go further in CSS best practices
//
//Styleguide 6
//
//

//Urls
//
// https://developer.mozilla.org/en-US/docs/Web/CSS
//
// http://philipwalton.com/articles/css-architecture/
//
// http://styleguides.io/
//
// http://alistapart.com/article/creating-style-guides
//
// http://axbom.com/slaying-5-ux-myths-good-mankind/
//
//Styleguide 6.1

.spacer {
  margin: 25px;
  padding: 15px;
  text-align:center;
  display: inline-block;
  background: white;
  }

/*template styles*/
.kss-sidebar {
	position:fixed!important;
}

#kss-node .kss-section {
	max-width: 80%;
}

.kss-style code {
	font-size: 12px;
	line-height: 14px !important;
	font-family: Menlo,Monaco,"Andale Mono","lucida console","Courier New",monospace;
}

#kss-node ol.linenums li {
	border:none;
}

#kss-node .kss-sidebar {
  background: white;
  top: 0;
  z-index:9;
}

.styleguide-break{
	background-color:$orange-400;
	color:$gray087;
	padding:$full-padding;

	span:before{
		content:"This element does not exist in material design. ";
	}
}

.angular-req span:before{
	content:"This element require additional angular directives. "!important;
}
